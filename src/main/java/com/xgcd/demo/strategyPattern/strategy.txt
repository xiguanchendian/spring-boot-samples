#策略模式应用场景
预付费系统中，电力用户有多种，电价有多种，如居民用电、商业用电、工业用电……
一天当中有四个阶梯电价，如尖峰平谷……
在电费计算过程中会出现很多if else判断，逻辑复杂、问题不好排查，并且在后期电力用户新增时，不易扩展……

#采用策略模式进行电费计算

#原始策略模式缺点
1、如果是单一的调用路线，依旧需要判断来执行不同的算法
2、当新增策略类时依旧需要修改原有代码
3、每次的调用都需要创建对象，不断创建对象导致内存的占用与代码执行时间的增加。

#结合spring优化策略模式
思路：
1、原始的策略类需要通过判断来执行具体的策略，我通过一个Map来解决该问题，通过不同的类型来获取不同的策略类。
2、如何做到只新增策略类就可以不需要修改代码呢？我通过自定义注解配合Spring来解决。
3、如何避免多次创建对象呢，很显然我们可以利用Spring来管理所有的策略类，并动态添加到Map中。

#具体实现
1、自定义注解类，使用时将该注解加到策略实现类上标识为自定义注解类
2、自定义策略枚举类，使用时（扩展时）将新增的策略加入到该枚举类中
3、定义业务处理结果返回实体
4、定义策略接口
5、定义具体策略实现类
6、定义策略模式上下文（执行策略方案）
7、定义策略管理类（重点），实现BeanPostProcessor，将那些添加了自定义注解的bean强制转为自定义顶层策略接口，并将策略类添加到Map中

#如何新增策略
定义策略类实现策略接口，在枚举中新增对应枚举值就可以了，不需要其他修改。
/**
 * 策略具体业务处理类
 */
@Component
@BusinessStrategy
public class StrategyA implements Strategy {
    @Override
    public BziResult invokeStrategy(StrategyParam strategyParam) {
        System.out.println("正在执行策略A……");
        return null;
    }

    @Override
    public StrategyEnum getStrategyEnum() {
        return StrategyEnum.STRATEGY_A;
    }
}

#优化后的好处
1、更小的内存占用
2、更便捷添加策略类的方式
3、更灵活的执行策略，去除了if判断
4、新增策略后，不需要再改动之前的业务代码



